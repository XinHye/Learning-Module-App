// Source code is decompiled from a .class file using FernFlower decompiler.
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.Timer;

public class TrueFalse extends JFrame implements ActionListener {
   private QuizListener listener;
   private JFrame frame;
   String[] questions = new String[]{"All increment and decrement operators are unary operators.", "Value on the right side can be different data-type of variable on the left side.", "count = count + first NOT SIMILAR TO count += first. ", "The floating-point type function declarations are found in the math.h header file.", "floor(x) function returns the largest integer smaller than or equal to x.", "++count is the postfix form and count++ is the prefix form of the increment operator."};
   char[] answers = new char[]{'T', 'F', 'F', 'T', 'T', 'F'};
   char guess;
   char answer;
   int index;
   int correct_guesses = 0;
   int total_questions;
   int result;
   int seconds;
   long[] timeTaken;
   JTextField textfield;
   JTextArea textarea;
   JButton buttonT;
   JButton buttonF;
   JLabel time_label;
   JLabel seconds_left;
   JTextField number_right;
   JTextField percentage;
   JTextArea score_message;
   Timer timer;

   public TrueFalse(QuizListener var1, JFrame var2) {
      this.total_questions = this.questions.length;
      this.seconds = 15;
      this.timeTaken = new long[this.total_questions];
      this.textfield = new JTextField();
      this.textarea = new JTextArea();
      this.buttonT = new JButton();
      this.buttonF = new JButton();
      this.time_label = new JLabel();
      this.seconds_left = new JLabel();
      this.number_right = new JTextField();
      this.percentage = new JTextField();
      this.score_message = new JTextArea();
      this.timer = new Timer(1000, new TrueFalse$1(this));
      this.listener = var1;
      this.frame = var2;
      this.initializeUI();
      this.nextQuestion();
   }

   private void initializeUI() {
      this.frame.getContentPane().removeAll();
      this.frame.repaint();
      this.textfield.setBounds(0, 0, 600, 50);
      this.textfield.setBackground(new Color(33, 25, 81));
      this.textfield.setForeground(new Color(21, 245, 186));
      this.textfield.setFont(new Font("Ink Free", 1, 18));
      this.textfield.setBorder(BorderFactory.createBevelBorder(1));
      this.textfield.setHorizontalAlignment(0);
      this.textfield.setEditable(false);
      this.textarea.setBounds(0, 50, 600, 100);
      this.textarea.setLineWrap(true);
      this.textarea.setWrapStyleWord(true);
      this.textarea.setBackground(new Color(33, 25, 81));
      this.textarea.setForeground(new Color(21, 245, 186));
      this.textarea.setFont(new Font("MV Boli", 1, 20));
      this.textarea.setBorder(BorderFactory.createBevelBorder(1));
      this.textarea.setEditable(false);
      this.buttonT.setBounds(80, 190, 160, 100);
      this.buttonT.setFont(new Font("MV Boli", 1, 20));
      this.buttonT.setFocusable(false);
      this.buttonT.addActionListener(this);
      this.buttonT.setText("True");
      this.buttonF.setBounds(340, 190, 160, 100);
      this.buttonF.setFont(new Font("MV Boli", 1, 20));
      this.buttonF.setFocusable(false);
      this.buttonF.addActionListener(this);
      this.buttonF.setText("False");
      this.seconds_left.setBounds(250, 500, 100, 50);
      this.seconds_left.setBackground(new Color(240, 243, 255));
      this.seconds_left.setForeground(new Color(255, 0, 0));
      this.seconds_left.setFont(new Font("Ink Free", 1, 24));
      this.seconds_left.setBorder(BorderFactory.createBevelBorder(1));
      this.seconds_left.setOpaque(true);
      this.seconds_left.setHorizontalAlignment(0);
      this.seconds_left.setText(String.valueOf(this.seconds));
      this.time_label.setBounds(250, 470, 100, 25);
      this.time_label.setBackground(new Color(240, 243, 255));
      this.time_label.setForeground(new Color(255, 0, 0));
      this.time_label.setFont(new Font("MV Boli", 1, 16));
      this.time_label.setHorizontalAlignment(0);
      this.time_label.setText("Timer");
      this.number_right.setBounds(200, 300, 200, 50);
      this.number_right.setBackground(new Color(131, 111, 255));
      this.number_right.setForeground(new Color(21, 245, 186));
      this.number_right.setFont(new Font("Ink Free", 1, 24));
      this.number_right.setBorder(BorderFactory.createBevelBorder(1));
      this.number_right.setHorizontalAlignment(0);
      this.number_right.setEditable(false);
      this.percentage.setBounds(200, 360, 200, 50);
      this.percentage.setBackground(new Color(131, 111, 255));
      this.percentage.setForeground(new Color(21, 245, 186));
      this.percentage.setFont(new Font("Ink Free", 1, 24));
      this.percentage.setBorder(BorderFactory.createBevelBorder(1));
      this.percentage.setHorizontalAlignment(0);
      this.percentage.setEditable(false);
      this.score_message.setBounds(200, 480, 300, 100);
      this.score_message.setBackground(new Color(131, 111, 255));
      this.score_message.setForeground(new Color(21, 245, 186));
      this.score_message.setFont(new Font("Ink Free", 1, 18));
      this.score_message.setBorder(BorderFactory.createBevelBorder(1));
      this.score_message.setLineWrap(true);
      this.score_message.setWrapStyleWord(true);
      this.score_message.setEditable(false);
      this.frame.add(this.time_label);
      this.frame.add(this.seconds_left);
      this.frame.add(this.buttonT);
      this.frame.add(this.buttonF);
      this.frame.add(this.textarea);
      this.frame.add(this.textfield);
      this.frame.repaint();
   }

   public void nextQuestion() {
      if (this.index >= this.total_questions) {
         this.results();
      } else {
         this.textfield.setText("Question " + (this.index + 1));
         this.textarea.setText(this.questions[this.index]);
         this.timer.start();
      }

   }

   public void actionPerformed(ActionEvent var1) {
      this.buttonT.setEnabled(false);
      this.buttonF.setEnabled(false);
      if (var1.getSource() == this.buttonT) {
         this.answer = 'T';
         if (this.answer == this.answers[this.index]) {
            ++this.correct_guesses;
            this.buttonT.setBackground(Color.GREEN);
         } else {
            this.buttonT.setBackground(Color.RED);
         }

         this.buttonT.setOpaque(true);
         this.buttonT.repaint();
      }

      if (var1.getSource() == this.buttonF) {
         this.answer = 'F';
         if (this.answer == this.answers[this.index]) {
            ++this.correct_guesses;
            this.buttonF.setBackground(Color.GREEN);
         } else {
            this.buttonF.setBackground(Color.RED);
         }

         this.buttonF.setOpaque(true);
         this.buttonF.repaint();
      }

      long var2 = (long)(15000 - this.seconds * 1000);
      this.timeTaken[this.index] = var2;
      this.displayAnswer();
   }

   public void displayAnswer() {
      this.timer.stop();
      this.seconds = 15;
      this.seconds_left.setText(String.valueOf(this.seconds));
      Timer var1 = new Timer(1500, new TrueFalse$2(this));
      var1.setRepeats(false);
      var1.start();
   }

   public void results() {
      this.frame.getContentPane().removeAll();
      this.frame.repaint();
      long var1 = 0L;
      long[] var3 = this.timeTaken;
      int var4 = var3.length;

      for(int var5 = 0; var5 < var4; ++var5) {
         long var6 = var3[var5];
         var1 += var6;
      }

      this.frame.repaint();
      if (this.listener != null) {
         this.listener.onQuizComplete(this.correct_guesses, var1);
      }

   }
}
