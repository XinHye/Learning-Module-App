// Source code is decompiled from a .class file using FernFlower decompiler.
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

public class Matching extends JFrame implements ActionListener {
   private QuizListener listener;
   private JFrame frame;
   String[] questions = new String[]{"pow(2,3)", "Seeds the random number generator", "ceil(4.0)", "floor(-5.7)", "Integer data type functions.", "ceil(4.2)"};
   String[] answers = new String[]{"8", "srand(time(NULL))", "4.0", "-6.0", "<stdlib.h>", "5.0"};
   String[] options = new String[]{" ", "<math.h>", "8", "<stdlib.h>", "srand(time(NULL))", "-5.0", "rand()", "5.0", "-6.0", "4.0", "6", "9"};
   int correct_guesses = 0;
   int total_questions;
   int index;
   int seconds;
   long[] timeTaken;
   JTextField textfield;
   JTextArea textarea;
   JComboBox<String>[] comboBoxes;
   JButton nextButton;
   JTextField number_right;
   JTextField percentage;
   JTextArea score_message;
   JLabel seconds_left;
   JLabel time_label;
   Timer timer;
   private int correctGuessesFromAll;
   private long totalTimeTakenFromAll;
   static Leaderboard leaderboard = new Leaderboard();

   public Matching(int var1, long var2, JFrame var4) {
      this.total_questions = this.questions.length;
      this.index = 0;
      this.seconds = 15;
      this.timeTaken = new long[this.total_questions];
      this.textfield = new JTextField();
      this.textarea = new JTextArea();
      this.comboBoxes = new JComboBox[this.total_questions];
      this.nextButton = new JButton("Next");
      this.number_right = new JTextField();
      this.percentage = new JTextField();
      this.score_message = new JTextArea();
      this.seconds_left = new JLabel();
      this.time_label = new JLabel();
      this.timer = new Timer(1000, new Matching$1(this));
      this.correctGuessesFromAll = var1;
      this.totalTimeTakenFromAll = var2;
      this.frame = var4;
      this.initializeUI();
   }

   private void initializeUI() {
      this.frame.getContentPane().removeAll();
      this.frame.repaint();
      this.textfield.setBounds(0, 0, 600, 70);
      this.textfield.setBackground(new Color(33, 25, 81));
      this.textfield.setForeground(new Color(21, 245, 186));
      this.textfield.setFont(new Font("Ink Free", 1, 14));
      this.textfield.setBorder(BorderFactory.createBevelBorder(1));
      this.textfield.setHorizontalAlignment(0);
      this.textfield.setEditable(false);
      this.textfield.setText("Match the following questions with a correct answer:");
      this.frame.add(this.textfield);

      for(int var1 = 0; var1 < this.total_questions; ++var1) {
         JLabel var2 = new JLabel(var1 + 19 + ". " + this.questions[var1]);
         var2.setBounds(10, 90 + var1 * 80, 350, 50);
         var2.setForeground(new Color(21, 245, 186));
         var2.setFont(new Font("MV Boli", 1, 14));
         this.comboBoxes[var1] = new JComboBox(this.options);
         this.comboBoxes[var1].setBounds(400, 90 + var1 * 80, 160, 50);
         this.comboBoxes[var1].setFont(new Font("MV Boli", 1, 12));
         this.frame.add(var2);
         this.frame.add(this.comboBoxes[var1]);
      }

      this.nextButton.setBounds(180, 650, 200, 50);
      this.nextButton.setFont(new Font("MV Boli", 1, 16));
      this.nextButton.addActionListener(this);
      this.frame.add(this.nextButton);
      this.seconds_left.setBounds(230, 590, 100, 50);
      this.seconds_left.setBackground(new Color(240, 243, 255));
      this.seconds_left.setForeground(new Color(255, 0, 0));
      this.seconds_left.setFont(new Font("Ink Free", 1, 24));
      this.seconds_left.setBorder(BorderFactory.createBevelBorder(1));
      this.seconds_left.setOpaque(true);
      this.seconds_left.setHorizontalAlignment(0);
      this.seconds_left.setText(String.valueOf(this.seconds));
      this.frame.add(this.seconds_left);
      this.time_label.setBounds(230, 560, 100, 25);
      this.time_label.setBackground(new Color(240, 243, 255));
      this.time_label.setForeground(new Color(255, 0, 0));
      this.time_label.setFont(new Font("MV Boli", 1, 15));
      this.time_label.setHorizontalAlignment(0);
      this.time_label.setText("Timer");
      this.frame.add(this.time_label);
      this.timer.start();
   }

   public void actionPerformed(ActionEvent var1) {
      if (var1.getSource() == this.nextButton) {
         this.checkAnswers();
         Timer var2 = new Timer(2000, new Matching$2(this));
         var2.setRepeats(false);
         var2.start();
      }

   }

   public void checkAnswers() {
      this.correct_guesses = 0;

      for(int var1 = 0; var1 < this.total_questions; ++var1) {
         if (this.comboBoxes[var1].getSelectedItem().toString().equals(this.answers[var1])) {
            ++this.correct_guesses;
            this.comboBoxes[var1].setBorder(BorderFactory.createLineBorder(Color.GREEN, 2));
         } else {
            this.comboBoxes[var1].setBorder(BorderFactory.createLineBorder(Color.RED, 2));
         }
      }

      long var3 = (long)(15000 - this.seconds * 1000);
      this.timeTaken[this.index] = var3;
      this.timer.stop();
   }

   public void showResults() {
      this.frame.getContentPane().removeAll();
      this.frame.repaint();
      this.textfield.setText("RESULTS!");
      this.textfield.setBounds(0, 0, 600, 50);
      this.frame.add(this.textfield);
      int var1 = this.correctGuessesFromAll + this.correct_guesses;
      int var2 = this.total_questions + 18;
      this.number_right.setBounds(200, 300, 200, 50);
      this.number_right.setBackground(new Color(131, 111, 255));
      this.number_right.setForeground(new Color(21, 245, 186));
      this.number_right.setFont(new Font("Ink Free", 1, 24));
      this.number_right.setBorder(BorderFactory.createBevelBorder(1));
      this.number_right.setHorizontalAlignment(0);
      this.number_right.setEditable(false);
      this.number_right.setText("Correct: " + var1 + "/" + var2);
      int var3 = (int)((double)var1 / (double)var2 * 100.0);
      this.percentage.setBounds(200, 360, 200, 50);
      this.percentage.setBackground(new Color(131, 111, 255));
      this.percentage.setForeground(new Color(21, 245, 186));
      this.percentage.setFont(new Font("Ink Free", 1, 24));
      this.percentage.setBorder(BorderFactory.createBevelBorder(1));
      this.percentage.setHorizontalAlignment(0);
      this.percentage.setEditable(false);
      this.percentage.setText("" + var3 + "%");
      this.score_message.setBounds(150, 420, 300, 100);
      this.score_message.setBackground(new Color(131, 111, 255));
      this.score_message.setForeground(new Color(21, 245, 186));
      this.score_message.setFont(new Font("Ink Free", 1, 18));
      this.score_message.setBorder(BorderFactory.createBevelBorder(1));
      long var4 = this.totalTimeTakenFromAll;
      long[] var6 = this.timeTaken;
      int var7 = var6.length;

      for(int var8 = 0; var8 < var7; ++var8) {
         long var9 = var6[var8];
         var4 += var9;
      }

      double var13 = (double)var4 / 1000.0;
      String var14 = String.format("Time taken: %.1f seconds", var13);
      this.score_message.setText(var14 + "\n\n");
      String var15;
      if (var3 >= 80) {
         var15 = "Outstanding!";
      } else if (var3 >= 60) {
         var15 = "That's good!";
      } else if (var3 >= 40) {
         var15 = "Good try!";
      } else if (var3 >= 20) {
         var15 = "You can do better!";
      } else {
         var15 = "Don't give up!";
      }

      this.score_message.append(var15);
      leaderboard.updateScore("Player", var3, var13);
      JButton var10 = new JButton("View Highest Score");
      var10.setBounds(175, 525, 250, 50);
      var10.addActionListener(new Matching$3(this));
      JButton var11 = new JButton("View Fastest to Complete");
      var11.setBounds(175, 580, 250, 50);
      var11.addActionListener(new Matching$4(this));
      JButton var12 = new JButton("Back to Main Menu");
      var12.setBounds(200, 635, 200, 50);
      var12.addActionListener(new Matching$5(this));
      this.frame.add(var10);
      this.frame.add(var11);
      this.frame.add(var12);
      this.frame.add(this.number_right);
      this.frame.add(this.percentage);
      this.frame.add(this.score_message);
      this.frame.repaint();
   }

   private void displayLeaderboardByScore(JFrame var1) {
      StringBuilder var2 = new StringBuilder();
      List var3 = leaderboard.getLeaderboardByScore();

      for(int var4 = 0; var4 < var3.size(); ++var4) {
         var2.append(var4 + 1).append(". ").append((String)((Map.Entry)var3.get(var4)).getKey()).append(": ").append(((Map.Entry)var3.get(var4)).getValue()).append("\n");
      }

      JOptionPane.showMessageDialog(var1, var2.toString(), "Highest Score", -1);
   }

   private static void displayLeaderboardByCompletionTime(JFrame var0) {
      StringBuilder var1 = new StringBuilder();
      List var2 = leaderboard.getLeaderboardByCompletionTime();

      for(int var3 = 0; var3 < var2.size(); ++var3) {
         var1.append(var3 + 1).append(". ").append((String)((Map.Entry)var2.get(var3)).getKey()).append(": ").append(((Map.Entry)var2.get(var3)).getValue()).append(" seconds, Score: ").append(leaderboard.getScore((String)((Map.Entry)var2.get(var3)).getKey())).append("\n");
      }

      JOptionPane.showMessageDialog(var0, var1.toString(), "Fastest to Complete", -1);
   }

   public void BacktoMainMenu() {
      this.frame.dispose();
      SwingUtilities.invokeLater(new Matching$6(this));
   }
}
